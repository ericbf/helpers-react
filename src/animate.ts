import { OpaqueInterpolation } from "react-spring/web.cjs"
import { transform } from "./transform"

/**
 * Map a single interpolator to multiple properties' interpolators.
 *
 * @template Props The properties being animated (that are returned from the callback).
 * @param interpolator The interpolator to use for the animation.
 * @param mapper The mapper function to use.
 * @returns An object container the interpolators generated by the mapper.
 */
export function animate<Props extends React.CSSProperties>(
	interpolator: OpaqueInterpolation<number>,
	mapper: (t: number) => Props
): { [K in keyof Props]: OpaqueInterpolation<Props[keyof Props]> }
/**
 * Map a single interpolator to multiple properties' interpolators.
 *
 * @template Props The properties being animated (that are returned from the callback).
 * @param interpolator The interpolator to use for the animation.
 * @param mapper The mapper function to use.
 * @returns An object container the interpolators generated by the mapper.
 */
export function animate<Props extends React.CSSProperties>(
	interpolator: OpaqueInterpolation<number> | undefined,
	mapper: (t: number) => Props
): { [K in keyof Props]: OpaqueInterpolation<Props[keyof Props]> } | undefined

export function animate<T extends React.CSSProperties>(
	interpolator: OpaqueInterpolation<number> | undefined,
	mapper: (t: number) => T
) {
	return interpolator != null
		? transform(mapper(0), (key) => interpolator.interpolate((t) => mapper(t)[key]))
		: undefined
}
